---
title: "Lesson_1"
author: " Mateusz Rzeszutek"
author-meta: "A"
date: today
format: 
  html:
    code-fold: show
    code-block-bg: true
    code-block-border-left: blue
    code-tools: true
    number-sections: true
    number-depth: 6
    toc: true
    toc-depth: 3
    toc-location: right
    toc-title: Spis Treści
    embed-resources: true
    smooth-scroll: true
    self-contained: true
    anchor-sections: true
    theme: 
        light: flatly
        dark: solar
    fontsize: 1.0em
    linestretch: 1.5
execute: 
  echo: true
  error: false
  warning: false
  output: true
---

<style type="text/css"> body {text-align: justify}  </style>

***

## Programowanie

###  Programowanie
***
Jest to proces pisania zestawu instrukcji (znanego również kodem), który maszyna może zrozumieć i zmuszania maszyny do ich przestrzegania. 

Celem może być rozwiązanie równania matematycznego, zautomatyzowanie nudnego zadania lub stworzenie strony internetowej, oprogramowania, aplikacji mobilnej lub całej gry.

Programowanie komputerowe wymaga umiejętności technicznych i kreatywnego myślenia. Niektórzy nazywają to nauką, inni sztuką.

Aby mieć pełny obraz tego, czym jest programowanie komputerowe, musimy podkreślić dwa punkty w definicji: „zmusić komputery do wykonywania zadań” i „napisać zestaw instrukcji zrozumiałych dla maszyny” . Porozmawiajmy najpierw o instrukcjach.

### Języki programowania
***

Pomyśl o komputerze jako o swoim **zagranicznym** przyjacielu, który
przybył z **przeszłości**. Nie rozumie żadnego języka poza swoim ojczystym. Potrzebuje bardzo prostych i jasnych opisów każdej czynności, które mają zostać wykonane.

Zgodnie z tą logiką nie możesz po prostu powiedzieć swojemu komputerowi, aby „zadzwonił do Dawida z księgowości”. Musisz opisać każde działanie, które obejmuje tą czynność:

1) Odbierz telefon
2) Naciśnij przycisk, aby włączyć ekran
3) Przesuń telefon, aby go odblokować
4) Otwórz Kontakty
5) Wpisz w wyszukiwarce „Steve z księgowości”.
6) Otwórz kontakt Steve'a
7) Naciśnij przycisk połączenia

Komputery nie rozumieją angielskiego ani polskiego, ale rozumieją języki programowania, takie jak C, Python czy Java. 

To trochę uproszczenie, ponieważ komputery tak naprawdę ich nie rozumieją — rozumieją tylko **kod maszynowy**. Programiści używają **kompilatorów** do tłumaczenia **kodu źródłowego** na kod maszynowy.

:::{.callout-caution collapse="true"}
## Czym jest kod maszynowy ?
Ciąg cyfr binarnych [0,1]
:::

Istnieje ponad tysiąc języków programowania. Stare wciąż ewoluują, a nowe wciąż się pojawiają. Poniżej możesz zobaczyć najpopularniejsze języki programowania w nauce danych. 

![Fig. 1. Top programming languages for data scientists](fig_to_qmd/most_popular_lang_data_science.png)

Każdy język komputerowy ma swoje własne cele i zalety. Niektóre języki lepiej nadają się do określonych aplikacji i zadań. Niektóre języki są trudniejsze, inne mniej. Niektóre są proste i popularne, inne są dopracowane i niszowe. Ważną rzeczą do zapamiętania jest to, że języki programowania mają części, konstrukcje i koncepcje, które są wspólne dla wszystkich z nich. Tak więc nauka innego języka komputerowego będzie równie trudna (lub równie łatwa) jak nauka języka obcego.

Szerszy opis: [KDnuggets](https://www.kdnuggets.com/2019/05/poll-top-data-science-machine-learning-platforms.html)

Ranking języków programowania:
[PYPL](https://pypl.github.io/PYPL.html),
[TIOBE-index](https://www.tiobe.com/tiobe-index/).

### Jaki język programowania 
***

Wybierając język, powinieneś zadać sobie pytanie, jaki rodzaj pracy chciałbyś wykonywać. 

* Chcesz zostać twórcą gier? 
* Czy chcesz tworzyć aplikacje na iPhone'a? 
* Chcesz robić strony internetowe? 
* A może potrzebujesz programowania do automatyzacji pracy z danymi naukowymi i statystycznymi?

![Fig. 2. Data science](fig_to_qmd/data_science.webp)

::: {.callout-tip}
Tak naprawdę chodzi o wybór **rodziny języków programowania**.
:::

## Paradygmaty

Różne zadania programistyczne można rozwiązać na różne sposoby: może być konieczne napisanie funkcji lub utworzenie oddzielnej klasy z metodami i tak dalej. Wszystkie takie warianty są łączone w różne podejścia programistyczne, które są również nazywane paradygmatami. Poniżej przeanalizujemy dwa główne paradygmaty: imperatywny i deklaratywny oraz ich rodzaje.

![Fig. 3 Paradygmaty](https://ucarecdn.com/024d46aa-b898-4713-b3a7-2c095c94b00e/)

::: callout-tip
Prawie wszystkie współczesne języki są wieloparadygmatowe.
:::

::: callout-important

Języki programowania niskiego i wysokiego poziomu

Interpretowane i kompilowane języków programowania 
:::

### Imperatywny paradygmat 
***
 Program rozkazujący jest podobny do poleceń wyrażanych przez tryb rozkazujący w językach naturalnych. Jest to sekwencja instrukcji, które procesor musi wykonać krok po kroku. Głównym celem tego paradygmatu jest sposób osiągnięcia celu. Paradygmat składa się z kilku instrukcji, a po wykonaniu ich wszystkich wynik jest zapisywany.

Na przykład chcesz wyświetlić frazę „Witaj, <nazwa użytkownika>!” na ekranie. Jak program powinien to zrobić? Poprzez następujące kroki:

* zapytaj o nazwę użytkownika
* przeczytaj i zapamiętaj nazwę użytkownika
* wyświetlić wynik

Programowanie imperatywne dzieli się na trzy szerokie kategorie: 

* paradygmat programowania **proceduralnego** , 
* programowanie **obiektowe** 
* i podejście do **przetwarzania równoległego** . 
 
#### Paradygmat programowania proceduralnego 
***
Paradygmat programowania proceduralnego opiera się na koncepcji wywołań procedur, w których instrukcje są ustrukturyzowane w procedury zwane również podprogramami lub funkcjami. Są to listy instrukcji, które krok po kroku mówią komputerowi, co ma robić. Innymi słowy, komputer pobiera dane wejściowe i zmienia je sekwencyjnie, pamiętając każdą nową zmianę.

Programowanie proceduralne jest odpowiednie do programowania ogólnego przeznaczenia w celu wykonywania typowych zadań. Może to być więc np. mały problem obliczeniowy. Ponadto kod można ponownie wykorzystać w różnych częściach programu, bez konieczności jego kopiowania.

Algorytm napisany w tym paradygmacie jest bardzo prosty w implementacji, ale jest raczej powolny i nie może rozwiązać złożonego problemu.

Językami programowania, które zaimplementowały paradygmat programowania proceduralnego, są C, Java, C++, ColdFusion i Pascal.

#### Paradygmat programowania obiektowego 
***
Programowanie zorientowane obiektowo to paradygmat, w którym program jest napisany jako zbiór klas. Każda klasa ma instancje zwane obiektami.

Klasa to ogólny sposób opisywania jednostki, definiujący zwykły stan i zachowanie zależne od tego stanu, a także zwykłe zasady interakcji z tą jednostką. Formalnie klasa jest postrzegana jako zestaw danych, takich jak pola, atrybuty, składowe klasy i funkcje, czyli metody pracy z nimi.

OOP może obsłużyć prawie wszystkie typowe problemy z życia codziennego, w których trzeba modelować typowe obiekty i pracować z nimi.

Języki programowania, które zaimplementowały paradygmat OOP, to Ruby, Java, C++, Python, Simula (pierwszy język OOP), Smalltalk, Visual Basic .NET i Objective-C.

#### Podejscie do przetwarzania równoległego 
***
Przetwarzanie równoległe pomaga skrócić czas wykonywania instrukcji. Czyni to poprzez udostępnianie lub równoległe wykonywanie instrukcji na wielu procesorach. Znaczenie tego podejścia można streścić w jednym zdaniu: „dziel i zwyciężaj”. 

### Paradygmaty deklaratywne
***
**Programowanie deklaratywne** to paradygmat programowania, w którym ważne jest określenie problemu i oczekiwanego wyniku jego rozwiązania. To znaczy, w przeciwieństwie do imperatywnego paradygmatu, w którym należy odpowiedzieć na pytanie **„jak to zrobić?”** musisz zadać pytania **„Co należy zrobić?”** i **„Jaki będzie wynik pracy?”**. 

Zamiast podawać instrukcje krok po kroku, mówisz systemowi, czego potrzebujesz i pozwalasz mu znaleźć rozwiązanie.

```{mermaid}
%%| echo: false
%%| fig-cap: Fig. 4. Znaczenie paradygmatów
%%| fig-align: center

flowchart TD
    subgraph Deklaratywny
        B((Powiedz co zrobić ?))
    end
    subgraph Imperatywny
        A((Powiedz jak zrobić ?))
    end
    
    classDef obj fill:#A9CCE3,stroke-width:0px,font-style:italic
    classDef sub fill:#7FB3D5,stroke:#333,stroke-width:1px,font-weight:bold

    class Imperatywny sub
    class Deklaratywny sub
    class A obj
    class B obj
```

Programowanie deklaratywne dzieli się na paradygmaty: 

* logiczne, 
* funkcjonalne, 
* bazodanowe.

::: callout-tip
Jak tworzyć diagramy: [quarto-diagrams](https://quarto.org/docs/authoring/diagrams.html), [mermaid](https://mermaid.js.org/).
:::

#### Paradygmat programowania w logice  
***

*Programowanie logiczne* to paradygmat programowania, który w dużej mierze opiera się na logice formalnej. Każdy program napisany w języku programowania logicznego jest zbiorem zdań w logicznej formie, które wyrażają fakty i reguły dotyczące określonego obszaru problemowego.

Tak więc podstawowe instrukcje programowania logicznego są następujące:

* **Fakty** to fundamentalne twierdzenia dotyczące domeny problemowej, takie jak „Sokrates jest człowiekiem”.

* **Reguły** są wnioskami na temat faktów w domenie („Wszyscy ludzie są śmiertelni”).

* **Zapytania** to pytania dotyczące tej domeny („Czy Sokrates jest śmiertelny?”)

Ogólnie rzecz biorąc, zadaniem tutaj jest znalezienie odpowiedzi na zapytanie w oparciu o fakty i reguły.

Główne rodziny języków programowania logicznego obejmują Prolog, programowanie zestawu odpowiedzi (ASP) i Datalog.

#### Paradygmat programowania funkcyjnego 
***

Programowanie funkcyjne to paradygmat programowania, w którym proces obliczeniowy jest interpretowany jako obliczanie wartości funkcji. Funkcja w tym przypadku jest podobna do funkcji matematycznej. To znaczy funkcja, w której wejściem jest tablica, która nie jest zmieniana, a wyjściem jest nowa tablica z nowymi danymi. To sprawia, że ​​funkcja matematyczna różni się od funkcji w programowaniu proceduralnym, gdzie funkcja jest sekwencją działań zmieniających oryginalne dane.

Oto prosty przykład: możesz mieć funkcję, która pobiera listę liczb jako dane wejściowe i zwraca nową listę z kwadratami tych liczb. Nie zmienia to oryginalnej listy numerów.

Języki programowania, które zaimplementowały paradygmat programowania funkcyjnego, to JavaScript, Haskell, Scala, Erlang, Lisp, ML, Clojure, OCaml i F#.

#### Paradygmat programowania baz danych
***
Ta metodologia programowania opiera się na pracy z danymi. Dane są przechowywane w bazie danych i zapytania są kierowane do tej bazy danych w specjalnym języku, na przykład SQL. Za pomocą tych języków można uzyskać dostęp do danych w celu filtrowania, przekształcania, obliczania statystyk i tak dalej. Instrukcje programu są definiowane przez dane, a nie zakodowane na stałe serie kroków.

Program bazy danych jest sercem systemu informacji biznesowej, umożliwiając tworzenie plików, wprowadzanie danych, aktualizowanie, wysyłanie zapytań i funkcje raportowania.

#### Podsumowanie parydygmatów
***
* Różne podejścia do tworzenia programów nazywane są paradygmatami.
* Istnieją dwa główne paradygmaty programowania: imperatywny i deklaratywny.
* Imperatywny paradygmat koncentruje się na osiągnięciu wyniku za pomocą instrukcji krok po kroku, które sekwencyjnie zmieniają dane.
* Paradygmat imperatywny obejmuje paradygmat programowania proceduralnego, programowanie obiektowe i podejście do przetwarzania równoległego.
* Paradygmat deklaratywny koncentruje się na zadaniu i stara się uzyskać oczekiwany rezultat.
* Paradygmat deklaratywny obejmuje paradygmaty logiczne, funkcjonalne i bazy danych.

## Dystrybucja python 

### Anacodna
***
Zamierza rozpocząć pracę z **nauką o danych** (Data Science) w python. Najlepszym wyborme na start jest zainstalowanie [anacondy](https://www.anaconda.com/). Jest to stabilna dystrybucja pyhona typu open source. Niestety waży dość dużo, ale znajdziesz tam wszystkie niezbędne pakiety do rozpoczęcia pracy z nauką o danych.

### IDE (Integrated Development Environment)
***
Istnieje wiele IDE dla pythona. Kilka popularnych IDE opisano [tutaj](https://www.simplilearn.com/tutorials/python-tutorial/python-ide). W przypadku pythona dla nauki o danych najlpopularnijszy IDE jest [jupyter]() oraz [spyder](). 

Moim faworytem jest jednak Visual Studio Code [VS](https://code.visualstudio.com/) przy współpracy interaktywnej jupytera oraz technologi [quarto]() zapewnia genialne IDE dla procesu nauki o danych. Przykładowe środowisko robocze przedstawia poniższa grafika. 

![Visual Studio Code + Quarto fo python](fig_to_qmd/python-vscode.png)

Po instalacji **anacody** nalezy zainstalować **VS code** oraz **Quarto**.Następnie zalecam skorzytsanie z gotowego samouczka w celu skonfigurowania środowiska pracy. Postaraj się przerobić cały samouczek VS code. Pozwoli ci to efektywnie pracować z wieloma jezykami programowania w jednym środowisku graficznym.

[VS code for Python](https://code.visualstudio.com/docs/python/python-tutorial). 

#### Rozszerzenia VS code
***
Zalecam instalacje niżej wymienionych rozszerzeń **VS code**.

[python](https://marketplace.visualstudio.com/items?itemName=ms-python.python)

[Python extension for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode)

[Python Extension Pack](https://marketplace.visualstudio.com/items?itemName=donjayamanne.python-extension-pack)

[jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter)

[Quarto](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)

[Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)

[Remote-SHH](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh)

[Polyglot Notebook](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode)

***
**Ciekawe rozszerzenie dla początkującyh:**

[Python Preview](https://marketplace.visualstudio.com/items?itemName=dongli.python-preview)

***
**Rozszerzenie dla opornych:**

[polish VS](https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-pl)

***

**GIT i GitHub**

Obsługa GIT i GitHub w VS Code jest naprawdę przyjemna. Zachecam do zapoznania się z samouczkiem. 

[Github in VS Code](https://learn.microsoft.com/en-us/training/modules/introduction-to-github-visual-studio-code/)

#### Alternatywa dla fanów R

Jestem fanem R oraz [IDE Rstudio](https://posit.co/products/open-source/rstudio/) od [Posit](https://posit.co/). Wiele osób korzysta z R i Rstudio ponieważ zapewnia potężne narzędzia do przetwarzania, analizy i wizualizacji statystycznych danych. W celu korzystania z IDE RStudio na potrzeby programowania w python wystarczy zainstalować pakiet [retuculate](https://rstudio.github.io/reticulate/), który umożliwia pisanie kodu. R posiada świetne i proste w nauce narzędzie do tworzenia aplikajci web [shiny](https://shiny.rstudio.com/tutorial/). Istnieje również wersja dla pythona [pyshiny](https://pyshine.com/)


#### VS Code dla R

Inną alternatywą jest korzystanie py i R w jednocześnie w VS Code. Jeśli zdecydujesz się na takie rozwiązanie dobrze dodaj rozszerzenia, które pozwolą ci pracować efektywnie z R. Wrzytskie informacje znajdziesz [tutaj](https://github.com/REditorSupport/vscode-R), nie zawsze jest to proste.



## Podstawy python 

### System pomocy python
***
Poniższe polecenie uruchamia system pomocy w oknie interaktywnym. 

```{python}
help('print')
```

Jeśli chcesz skorzystać z systemu pomocy w przegladrace internetowej to można skorzystać z `pydoc-b`. wpisz to polecenie terminalu, a uruchomi się przeglądarka z systemem pomocy. Dalej każdy sobie poradzi. 

### Zmienne i przekazywanie argumentów
***
Stworzymy takie same zmienne `a` i `b`.

```{python}
a = [1,2,3]
b = a
```

```{python}
#| echo: false
print(a) ; print(b)
```

W niektórych językach przypisanie listy `a = [1, 2, 3]` do `b` spowoduje  skopowanie danych. W Pythonie `a` i `b` odnoszą się do tego samego obiektu, oryginalnej listy [1, 2, 3]. Patrz rys. 3.1. 

![fig. 3.1. przypisanie zmiennych](zmienne_przekazywanie.png)

Możesz to sobie udowodnić, dołączając element do obiektu `a` następnie sprawdzając `b`:

```{python}
a.append(4)
b
```

Zrozumienie semantyki odwołań w Pythonie oraz tego, kiedy, jak i dlaczego dane są kopiowane, jest szczególnie ważne podczas pracy z większymi zbiorami danych w Pythonie.

***

Kiedy przekazujesz obiekty jako argumenty do funkcji, tworzone są nowe zmienne lokalne odwołujące się do oryginalnych obiektów **bez kopiowania**. Jeśli powiążesz nowy obiekt ze zmienną wewnątrz funkcji, nie spowoduje to nadpisania zmiennej o tej samej nazwie w „zakresie” poza funkcją („zakres nadrzędny”). Dlatego możliwa jest zmiana elementów wewnętrznych zmiennego argumentu. Załóżmy, że mamy następującą funkcję:

```{python}
def append_element(s_list, element):
    s_list.append(element)
```

Teraz:

```{python}
data = [1,2,3]
append_element(data, 4)
data
```

### Import
***
Moduł to poprostu plik **.py**, który zawiera kod źródłowy pythona. Stwórzmy plik **some_module.py**. Zapisz go w obszarze roboczym. 

````
    # some_module.py
    PI = 3.14159

    def f(x):
        return x + 2

    def g(a, b):
        return a + b
````

Teraz wykonamy import modułu. Pozwala nam on odwoływać się do funkcji i obiektów utworzonych w pliku **some_module.py**.

```{python}
#| output: false
import some_module
some_module.f(5)
some_module.g(4, 6)
some_module.PI
```

Alternatywnie można wczytać wybrane elmenty:

```{python}
#| output: false
from some_module import f, g, PI
f(5) 
g(5,PI)
```

Zastosowanie `as` do importu modułu:

```{python}
import some_module as sm
sm.g(5, sm.PI)
```

Można importować tylko wybrane elementy oraz zmieniać im aliasy. 

```{python}
from some_module import PI as pi, g as gf
gf(6, pi)
```

### Operatory binarne i porównania 
***
Operatory arytmetyczne:

```{python}
a = 2
b = 4.5
```

```{python}
#| output: false
a + b
b - a
a * b
b / a
b // a
a ** 4
```

Operatory logiczne:

```{python}
#| output: false
#| eval: false

a & b # True jesli a i b True 
a | b # True jesli a lub b True
a ^ b # True jesli a lub b True, ale False gdy oba True 

a == b
a != b

a < b
a > b

a <= b
a >= b
```

Innel logiczne:

```{python}
#| output: false
#| eval: false

a is b     # True - ten sam obiekt
a is not b # True - jesli rożne oboekty
```

Przykład:

```{python}
a = [1, 2, 3]
b = a
c = list(a)
```

```{python}
a is b # odwołuje się do tego samego obiektu
```

```{python}
a is c # odwołuje się do różnych obiektów
```

Funkcja `list` zawsze tworzy nowy obiekt. Więc `c` jest różne od `a`. Natomiast `==` to nie jest to samo co `is`.

```{python}
a == c
```

Typowe zastosowanie `is` i `is not` jest sprawdzenie, czy zmienna jest `None`, ponieważ istnieje tylko jedno wystąpienie `None`:

```{python}
a = None
a is None
```

### Obiekty zmienne i niezmienne
***
Zdecydowana większość obiektów i klas w `py` jest modyfikowalna (*mutable*). 

```{python}
a_list = ["foo", 2, [4, 5]]
a_list[2] = [1,2]
a_list
```

Inne obiekty, takie jak `string` (znaki), `tuples` (krotki, `datetime` (Data godzina) są niezmienne. Uruchom poniższy kod. Sprawdź uzyskane komunikaty.

```{python}
#| eval: false
a_tuple = (3, 5, (4, 6))
a_tuple[2] = 4
```

::: {.callout-tip collapse="true"}
Modyfikowanie obiektów jest z reguły działaniem nieporządanym. Pisząc funkcje zaznacz wszelkie modyfikacje w dokumentacji. Zalecanym jest unikanie modyfikacji obiektów. 
:::

### Obiekty skalarne (scalar)
***
Typy zmiennych skalaranych 

1) `int` - całkowita
2) `float` - zmiennorzecinkowa podwójnej precyzji
3) `str` - znakowy
4) `bool` - logiczny
5) `None` - pusta `null` - istnieje tylko jedno wystąpienie
6) `bytes` - surowe dane binarne

#### Liczby 
***
**typ liczbowy** to `int` i `float`.  `int` przechowuje dowolne duże wartości. 

```{python}
val = 123234
val ** 6 
```

Liczby zmiennoprzecinkowe są zawsze podwójnej precyzji i można je wyrazić w postaci notacji naukowej.

Dzielenie liczb calkowity zwraca zmiennoprzecinkowe. Chyba ze zastosujemy operator `//`

```{python}
a = 3/2
type(a)
```

```{python}
type(3//2)
```

#### Znaki

**typ znakowy** - zawsze cudysłów, pojedyńczy lub prefrowany podwójny:

```{python}
a = 'pierwsz droga pisania znaków unicode'
b = "inna droga"
```

Można pisać wiele wierszy sstosująć cudysłow potrójny `"""` :

```{python}
c = """
To jest długi ciąg znaków
składa się z kilku lini
"""
print(c)
```

Ten ciąg znaków `c` faktycznie zawiera cztery wiersze tekstu. Łatwo policzyć liczbę znaków za pomocą funkcji `count` metodą `c`:

```{python}
c.count("\n")
```

::: callout-warning
Obiekty skłądające się z znaków **nie są modyfikowalne**. 
:::

Jeśli chcemy zmodyfikować ciąg znaków musimy użyć funkcji lub metody, która tworzy nowy ciąg. 

```{python}
b = a.replace("znaków", "więcej znaków")
b
```

Obiekt `a` nie został zmodyfikowany:

```{python}
a
```

Konwersja na tryb znakowy funkcja `str`:

```{python}
a = 5.6
type(a)
```

```{python}
a = str(a)
type(a)
```

`Strings` są sekwencją znaków unicode, więc mogą byc traktowane jak sekwencja.


```{python}
s = "python"
list(s)
```

```{python}
s[:3]
```

Powyższa składnia to `slicing` - póżniej ją omówimy, ważne jest to że jest bardzo często stosowana.

::: callout-important
znak `\` jest tzw. znakiem ucieczki. Jest używany do tworzenia znaków specjalnych np: polecenie nowej lini to `\n`. W celu utworzenia symbolu `\` nalezyw kodzie napisać `\\`. Jest to irytujące. Wiec często stosuje się zapis `r` przed trybem znakowym. `r` - interpretuj znaki takie jakie są. 
:::

```{python}
s = r"to\je\sciezka\dostepu" ; s
```

Operator dodawanie łączy sekwencje znaków.

```{python}
a = "pierwszy"
b = "drugi"
a + b
```

Metoda `format` dla obiektów znakowych. Pozwala tworzyć nowy sformatowyany ciąg.

```{python}
template = "{0:.2f} {1:s} to około {2:d} $"
```

* `{0:.2f}` - pierwszy element - liczba zmiennoprzecinkowa, dokałdność 2 miejsca
* `{1:s}` - drugi elemnt - string
* `2:d` - trzeci element - liczba całkowita 

```{python}
template.format(4.50, "zł", 1)
```

Ciekawsza funkcja formatowania to `f`.

```{python}
cena_pl = 100
rate = 4.50
jednostka = "zł"
f"{cena_pl} {jednostka} to {cena_pl / rate} $"
```

Istnieje wiele metod znaków [pydocs - string](https://docs.python.org/3/library/string.html) 

Import liter alfabeu.

```{python}
import string
sl = string.ascii_lowercase
su = string.ascii_uppercase
```

Zmiana wielkicj i małych liter:

```{python}
sl.upper() # metoda ?
su.lower() # metoda ?
len(sl) # funkcja ?
sl.count("a")
```

#### Bajty i Unicode
***

W python 3.0 wrpwadzono pierwszorzędny typ znkaów `Unicode`.

```{python}
val = "español"
val
```

Metoda konwersjii na Ubicode na UTF-F `encode` W starszych wersjach Pythona ciągi były bajtami bez jawnego kodowania Unicode. Możesz przekonwertować na Unicode, zakładając, że znasz kodowanie znaków. Oto przykładowy ciąg znaków Unicode ze znakami spoza zestawu ASCII:

```{python}
val_utf = val.encode("utf-8")
val_utf
```

```{python}
type(val_utf)
```

W drógą stronę to `decode`

```{python}
val_utf.decode("utf-8")
```

#### Logiczny
***

Łączenie wyrażeń logicznych 

```{python}
#| output: false
True and False
True or False
```

Po przekształceniu Zero to `False`, a jeden to `True`

```{python}
#| output: false 
bool(1) # True
bool(0) # False
int(True) # 1
int(False) # 0
```

Oprócz `and`, `or` i `is` mamy słowo kluczowe `not` - czyli negacja.

```{python}
not False
```

```{python}
not True
```

::: callout-tip
Sprawdź słowo kluczowe `not` z liczbami typu integer
:::

####  Type casting
***
Typy `bool`, `str`, `int`, `float` to także funkcje, którymi można rzutować wartości. 

```{python}
#| output: false
pi = "3.1459"
int(float(pi))
float(pi)
```

#### None
***
`None` to typ wartości `null` (puste)

```{python}
a = None
a is None
```

```{python}
b = 5
b is not None
```

#### None w funkcji
***
`None` jest powszechnie stosowane jako wartość domyślna funkcji. 


```{python}
def add_ab_mayby_times(a, b, c = None):
    result = a + b

    if c is not None:
        result = result * c
   
    return result
```

::: callout-tip
Sprawdź czy funkcja działa 
:::

#### Data i godzina
***
Korzystanie z daty wymaga inportu modyłu `datetime`. Udostępnia on 3 typy obiektów:

* `date`
* `time`
* `datetime`

```{python}
#| output: false
from datetime import datetime, date, time

dt = datetime(2011, 10, 11, 20, 23, 33)
dt.year    
dt.month
dt.day
dt.minute
dt.second
```

Można wyizolować człony `date` i `time`

```{python}
#| output: false
dt.date()
dt.time()
```

Metoda `strftime` formatuje date na typ znakowy:

```{python}
dt2 = dt.strftime(format = "%Y-%m-%d %H:%M")
dt2
```

Konwersja znaków na datetime:

```{python}
dt3 = datetime.strptime("20091129", "%Y%m%d")
dt3
```

W przypadku agregowania szeregów czasowych przydatne może być zastąpienie pozycji `minute` i `second` zerami. 


```{python}
dt_hour = dt.replace(minute = 0, second = 0)
dt_hour
```

Zauważ, że utworzony obiekt `dt` typu `datetime` jest **niemodyfikowlany**. W efekcie należy zawsze utworzyć nowy obiekt przechowujący zmodyfikowaną wartość `dt`. 

```{python}
dt
```

Róznica obiektów `datetime` tworzy obiekt obiekt typu `timedelta`. A dodanie `datetime` do `timedelta` tworzy przesuniecie typu `datetime`

```{python}
delta = datetime(2011, 10, 5) - dt
delta
```

```{python}
delta + dt
```

### Kontrola przepływu 
***

#### Instrukcje warunkowe 
***

Instrukcja `if` jest podstaowym typem instrukcji przepływu pracy. 

```{python}
x = -5
if x < 0:
    print('x jest mniejsze od zera')
```

Wiele warunków. Zauważ, że za kazdym razem po instrukcji `if`, `ifel`, `else` stosujemy `:`. A po dwukropku stosujemy 4 spacje. Można użyć kalwisza `TAB`, który wprowadzi 4 spacje. 

```{python}
#| output: false
if x < 0:
    print("x jest mniejsze od zera")
elif x == 0:
    print('x równe zero')
elif 0 < x < 5:
    print('dodatnie, ale mniejsze od 5')
else:
    print('Dodatnie i większe do 5')
```

::: callout-tip
Sprawdź działanie funkcji. Zastosuj zero typu `int` oraz `float`
:::

::: callout-important
Jeśli ktoryś z warunków zostanie osiągnięty następne nie są sprawdzene. Warunki są oceniane od lewej do prawej - jeśli stosujemy wiele warunków. Patrz przykłąd poniżej.
:::

```{python}
a = 5 ; b = 7 
c = 8 ;  d = 4

if a < b or c > d:
    print("Made it")
```

Jeśli warunke pierwszy `a < b` jest spełniony, to warunke `c > d` nie jest sprawdzany ponieważ zastosowano słowo kluczowe `or`.

Inny typ porównania to łańcuch:

```{python}
4 > 3 == 3 > 1
```

Wystarczy, że jeden z elemntów nie będzie spełaniał warunku to otrzymamy wartość `False`.  

#### Pętla for
***
Pętle służą do wykonywania iteracji po kolekcji (takiej jak `list` i `tuple`). Standardowa składnia pętli to: 

```{python}
#| eval: false
for value in colection:
    # zestaw instrukcji
```

Przykład prostej pętli z funkcja pomijania pozostałcyh elementów bloku `continue`. Funkcja ta zabezpiecza naszą pętlę przed błędem w przypadku wystąpienia elemntu pustego `None`.

```{python}
sekwencja = [1, 2, None, 4, None, 5] # kolekcja [collection]
total = 0  # wyjście [output]
for i in sekwencja:
    if i is None:
        continue
    total += i
print(total)
```

Słowo kluczowe `break` zamyka wewnętrzną pętlę. Pozostała działą do zakończenia kolekcji. W tym przypadku pętla węwnętrza wykonywała dokąłdnie tyle samo operacji co zewnętrza, bo słowo kluczowe `break` zatrzymywało pętle. 

```{python}
sequence = [1, 2, 0, 4, 6, 5, 2, 1]
total_5 = 0

for value in sequence:
    if value == 5:
        break
    total_5 += value
    print("total =  ", total_5, "value = ", value)
```


```{python}
for i in range(0,4):
    for j in range(0,4):
        if j > i:
            break
    print(i, j)
```

::: callout-tip
Wykonaj powyższy kod bez lini:
        if i > j:
            break
Pamietaj o semantyce kodu po operatorze `:`. 
:::

::: callout-important
Jesli sekwencje są kolekcją np. `list` lub `tuple`, to można je łatwo wypakować za pomocą pętli `for`.
:::

````
for a, b, c in iterator:
    # jakaś instrukcja
````

#### Pętla while 
***

Pętla zostaje zakończona, gdy warunek zwróci wartość `false` lub zostanie zamknięta słowem kluczowym `break` 

```{python}
x = 256
total = 0

while x > 0:
    if total > 500:
        break
    total += x
    x = x // 2

total
```

#### przejdź [pass]
***

instrukcja `pass` mówi *nic nie rób*. Stosowana, gdy chcemy wyeliminować jakis blok kodu. Ewentualnie gdy nie mamy jeszcze pomysłu co w tym bloku ma się znaleźć. 

```{python}
x = 0
if x < 0:
    print("mniej niż zero")
elif x == 0:
    # TODO: wstaw tu coś sprytnego
    pass
else:
    print("wyniki pozytywny") 
```

#### Zakres [range]

Funkcja `range()` tworzy sekwencje liczb całkowitych.

```{python}
range(1,10)
```

```{python}
list(range(0,10))
```

Krok sekwencji:

```{python}
list(range(0,20, 2))
```

Może być ujemny krok sekwencji

```{python}
list(range(10,-10, -2))
```

Typowym zastosowaniem `range()` jest iteracja po sekwencji

```{python}
seq = [1,2,3,4]

for i in range(len(seq)):
    print(f"element {i} vlaue of seq {seq[i]}")
```

Przykład zastosowania `range`.

```{python}
total = 0
for i in range(20):
    if i % 3 == 0 or i % 5 == 0:
        total += i
        print(f"total = {total} i = {i}")
```

```{r}
a <- c(1,2,3) * 2 ; a
```










### Skróty kalwiaturowe vs code

````
CTRL + P
CTRL + Spcaja

CTRL + SHIFT + P - commend pallet
CTRL + SHIFT + E - exploler

CTRL + D - edycja wielu lini, trzeba klikać wiele razy D w celu zanzaczenia wiekszej ilosci komend.

CTRL + 1 - open window edit
CTRL + 2

CTRL + N - new file
CRLL + O - new folder
CTRL + W - close file

CTRL + ` - open terminal
Ctrl+Shift + 5 Podziel terminal
Ctrl+Shift + ` Utwórz nowy terminal

Ctrl+Shift+L - podgląd na żywo przy pisaniu równań
````

```{python}
#| output: false
import pandas as pd
import numpy as np
data = pd.read_csv("titanic3.csv")
data.dtypes
# Uwaga, akurat ten zesatw danych nie ma tych pytajników '?', 
# które zamieniamy na nan, a typy zmiennych są poprawne.
data.replace("?", np.nan, inplace=True)
data.astype({"age": np.float64, "fare": np.float64})
```


```{python}
import seaborn as sns
import matplotlib.pyplot as plt

fig1, axs = plt.subplots(ncols=2, figsize=(15,5))
sns.violinplot(x="survived", y="age", hue="sex", data=data, ax=axs[0])
sns.pointplot(x="sibsp", y="survived", hue="sex", data=data, ax=axs[1])
```


```{python}
fig2, axs = plt.subplots(ncols=3, figsize=(20,5))
sns.pointplot(x="parch", y="survived", hue="sex", data=data, ax=axs[0])
sns.pointplot(x="pclass", y="survived", hue="sex", data=data, ax=axs[1])
sns.violinplot(x="survived", y="fare", hue="sex", data=data, ax=axs[2])
```

```{python}
data.replace({'male': 1, 'female': 0}, inplace=True)
```

```{python}
data.corr().abs()[['survived']]
```

```{python}
data['relatives'] = data.apply (lambda row: 
                                    int((row['sibsp'] + row['parch']) > 0), 
                                axis=1)
data.corr().abs()[["survived"]]
```
